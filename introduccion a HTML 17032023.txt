Así que primero crea un directorio llamado templates dentro de tu directorio blog. Luego crea otro directorio llamado blog dentro de tu directorio de templates:

blog
└───templates
    └───blog

Y ahora crea un archivo post_list.html (déjalo en blanco por ahora) dentro de la carpeta blog/templates/blog

Mira cómo se ve su sitio web ahora: http://127.0.0.1:8000/

copiar o escribir en tu archivo html post_list.html lo siguiente


<html>
    <head>
        <title>Ola's blog</title>
    </head>
    <body>
        <p>Hi there!</p>
        <p>It works!</p>
    </body>
</html>

Head = al titulo de tu pagina web que va a salir en el navegador
body =  es el contenido de la pagina

¡Ahora puedes divertirte un poco y tratar de personalizar tu plantilla! Aquí hay algunas etiquetas útiles para eso:

<h1>Un título</h1> - para tu título más importante
<h2>Un subtítulo</h2> - para el título del siguiente nivel
<h3>Un subsubtítulo</h3> - ... y así hasta <h6>
<p>Un párrafo de texto</p>
<em>texto</em> - pone en cursiva tu texto
<strong>texto</strong> - pone en negrita tu texto
<br> va en otra línea (no puedes poner nada dentro de br y no hay etiqueta de cierre)
<a href="https://djangogirls.org">link</a> - crea un vínculo
<ul><li>primer elemento</li><li>segundo elemento</li></ul> - crea una lista, ¡igual que esta!
<div></div> - define una sección de la página


ejemplo de plantilla completa

<html>
    <head>
        <title>Django Girls blog</title>
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My first post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My second post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut f.</p>
        </div>
    </body>
</html>

Haz commit, y sube tu código a GitHub

verificamos lo que tenemos que subir
$ git status
agregamos los archivos para subirlos
$ git add --all .
verificamos que los archivos esten en color verde osea listos para subirlos
$ git status
hacemos commit y le ponemos el nombre del cambio
$ git commit -m "Cambie el HTML para la página."
Subir o enviar los cambios a github con push y establecemos a que rama
git push origin master

Descarga tu nuevo código a PythonAnywhere y actualiza tu aplicación web

PythonAnywhere command-line
$ cd ~/<your-pythonanywhere-domain>.pythonanywhere.com
$ git pull
[...]

como yo lo hice

00:16 ~ $ cd "keniavalverde.pythonanywhere.com"
00:16 ~/keniavalverde.pythonanywhere.com (master)$ 
00:17 ~/keniavalverde.pythonanywhere.com (master)$ git pull
