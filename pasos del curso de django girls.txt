crear un entorno virtual virtual env, esto se debe de ejecutar dentro de la carpeta
del proyecto
python -m venv myvenv


para activar el entorno virtual cuando vamos a trabajar
 myvenv\Scripts\activate


crear un proyecto 
django-admin.exe startproject mysite .


CONFIGURACION DJANGO

abrimos mysite/settings.py dentro de la carpeta que guardamos en el visual estudio code
y hacemos los siguientes cambios

TIME_ZONE = 'Europe/Berlin'(modificamos para mi zona horaria)
LANGUAGE_CODE = 'es-es'(el lenguaje que le queremos configurar)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

luego ejecutamos el siguiente comando en la terminal para crear la base de datos
python manage.py migrate


CONFIGURAR SERVER

iniciar el servidor
(myvenv) ~/djangogirls$ python manage.py runserver
(myvenv) ~/djangogirls$ python manage.py runserver 0:8000
				python manage.py runserver 0.0.0.0:8080
copiar en el navegador http://127.0.0.1:8000/ para abrir la pagina web


CREAR APP

(myvenv) C:\Users\Name\djangogirls> python manage.py startapp blog

Vamos a editar otra vez el archivo settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig',
]

Crear el modelo del post
from django.conf import settings
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title


para mas informacion de como se definen las propiedades del objeto visita
(https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types)

CREAR TABLAS DEL MODELO CREADO

(myvenv) ~/djangogirls$ python manage.py makemigrations blog
Migrations for 'blog':
  blog/migrations/0001_initial.py:

  - Create model Post

aplicar el archivo de migracion a la bd
(myvenv) ~/djangogirls$ python manage.py migrate blog
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Applying blog.0001_initial... OK


ADMINISTRAR DJANGO

Abrir el fichero blog/admin.py

from django.contrib import admin
from .models import Post

admin.site.register(Post)

Hay que iniciar el virtual env y luego ejecutar el server
myvenv\Scripts\activate
python manage.py runserver
ir a la URL http://127.0.0.1:8000/admin/ para administrar django

Para iniciar sesion primero vamos a crear un super usuario o admin
python manage.py createsuperuser (estos lo corremos en la consola dentro del virtual env)
username: Kerberos
correo: kenia.valverde@outlook.com
contrase√±a: Lamama123$$kjhd5


git remote add origin git@github.com:KeniaValverde/my-first-blog.git


Conectar a Python Anywhere
actualizar el pip primero
python.exe -m pip install --upgrade pip
instalar Python Anywhere
correr esto dentro de python anywhere en la consola
pip install --user pythonanywhere

pa_autoconfigure_django.py --python=3.11 git@github.com:KeniaValverde/my-first-blog.git
